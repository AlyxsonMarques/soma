// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255)
  cpf       String  @unique @db.VarChar(11)
  email     String  @unique @db.VarChar(255)
  password  String  @db.Text
  type      UserType @default(MECHANIC)
  status    UserStatus @default(PENDING)
  birthDate DateTime @db.Date
  assistant Boolean @default(false)
  observations String? @db.Text
  repairOrders RepairOrder[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([email, cpf])
}

enum UserType {
  MECHANIC
  BUDGETIST
}

enum UserStatus {
  APPROVED
  REPROVED
  PENDING
}

model Base {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255)
  phone     String   @db.VarChar(11)
  address   BaseAddress @relation(fields: [addressId], references: [id], onDelete: NoAction)
  addressId String   @db.Uuid
  repairOrderItems RepairOrderServiceItem[]
  repairOrders RepairOrder[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([name, phone])
}

model BaseAddress {
  id        String   @id @default(uuid()) @db.Uuid
  street    String   @db.VarChar(255)
  number    Int
  complement String? @db.VarChar(255)
  neighborhood String @db.VarChar(255)
  city         String @db.VarChar(255)
  state        String @db.VarChar(2)
  zipCode      String @db.VarChar(8)
  bases      Base[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([zipCode, city, state])
}

model RepairOrderServiceItem {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @db.VarChar(255)
  value     Decimal @db.Decimal(10, 2)
  base      Base @relation(fields: [baseId], references: [id], onDelete: NoAction)
  baseId    String @db.Uuid
  repairOrderServices RepairOrderService[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([name, baseId])
}

model RepairOrderService {
  id        String   @id @default(uuid()) @db.Uuid
  item      RepairOrderServiceItem @relation(fields: [itemId], references: [id], onDelete: NoAction)
  itemId    String @db.Uuid
  quantity  Int @db.SmallInt
  labor     String @db.VarChar(255)
  duration  BigInt @db.BigInt
  value     Decimal @db.Decimal(10, 2)
  discount  Decimal @db.Decimal(10, 2)
  type      RepairOrderServiceType
  status    RepairOrderServiceStatus
  category  RepairOrderServiceCategory
  repairOrder RepairOrder @relation(fields: [repairOrderId], references: [id], onDelete: NoAction)
  repairOrderId String @db.Uuid
  photo String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?

  @@index([itemId, repairOrderId])
}

enum RepairOrderServiceType {
  PREVENTIVE
  CORRECTIVE
}

enum RepairOrderServiceCategory {
  LABOR
  MATERIAL
}

enum RepairOrderServiceStatus {
  PENDING
  APPROVED
  CANCELLED
}

model RepairOrder {
  id        String   @id @default(uuid()) @db.Uuid
  gcaf      BigInt   @unique @db.BigInt
  users     User[]
  base      Base @relation(fields: [baseId], references: [id], onDelete: NoAction)
  baseId    String @db.Uuid
  plate     String @db.VarChar(7)
  kilometers Int
  status    RepairOrderStatus @default(PENDING)
  observations String? @db.Text
  discount Decimal @db.Decimal(10, 2)
  services RepairOrderService[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deletedAt DateTime?
  @@index([gcaf, baseId, plate])
}

enum RepairOrderStatus {
  PENDING
  REVISION
  APPROVED
  PARTIALLY_APPROVED
  INVOICE_APPROVED
  CANCELLED
}